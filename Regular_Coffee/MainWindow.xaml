<Window x:Name="mainWindow" x:Class="Regular_Coffee.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Regular_Coffee"
        mc:Ignorable="d"
        Title="Regular Coffee" Height="605" Width="750" MinHeight="605" MinWidth="525" BorderBrush="{StaticResource DarkGrayBrush}" WindowStyle="SingleBorderWindow" Loaded="MainWindow_Loaded"  KeyDown="MainWindow_KeyDownEvents" Closing="Window_Closing" ContentRendered="Window_ContentRendered">
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="30" CornerRadius="2"/>
    </WindowChrome.WindowChrome>
    <Window.Resources>
        <Style x:Key="bigHeaders" TargetType="TextBlock">
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="TextBlock.Effect">
                <Setter.Value>
                    <DropShadowEffect Color="Black" ShadowDepth="1" BlurRadius="5" Opacity="0.7"/>
                </Setter.Value>
            </Setter>
        </Style>
        <local:EvenNumberColorConverter x:Key="EvenNumberColorConverter" />
        <local:ReverseBoolToVisibilityConverter x:Key="ReverseBoolToVisibilityConverter" />
    </Window.Resources>
    <Border Name="mainBorder" BorderThickness="5" BorderBrush="{StaticResource DarkGrayBrush}">
        <Grid Name="mainGrid" UseLayoutRounding="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="35" />
                <RowDefinition Name="wholePrefGrid" Height="0"/>
                <RowDefinition Height="60" />
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <!--Top window border-->
            <Grid Background="{StaticResource DarkGrayBrush}" Grid.Row="0" MouseDown="Window_Move" WindowChrome.IsHitTestVisibleInChrome="True" MouseLeftButtonUp="TopBar_LeftButtonUp" MouseMove="TopBar_MouseMove">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="5"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0">
                    <DockPanel HorizontalAlignment="Left" VerticalAlignment="Center">
                        <DockPanel>
                            <Menu DockPanel.Dock="Top" Background="#00FFFFFF">
                                <MenuItem Margin="0,0,0,0" Padding="0,0,0,0" BorderThickness="0">
                                    <MenuItem.Header>
                                        <StackPanel>
                                            <Image Height="30" Width="30" Margin="0,0,0,0" VerticalAlignment="Center">
                                                <Image.Style>
                                                    <Style TargetType="{x:Type Image}">
                                                        <Setter Property="Source" Value="Icons/Burger.png"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=StackPanel,AncestorLevel=1}, Path=IsMouseOver}" Value="True" >
                                                                <Setter Property="Source" Value="Icons/BurgerHover.png" />
                                                            </DataTrigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Source" Value="Icons/BurgerHover.png"/>
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Image.Style>
                                            </Image>
                                        </StackPanel>
                                    </MenuItem.Header>
                                    <MenuItem Header="_Full Match" Click="FullMatch_ButtonClick" InputGestureText="Ctrl+M"/>
                                    <MenuItem Header="_Partial Match" Click="PartialMatch_ButtonClick" InputGestureText="Ctrl+P"/>
                                    <MenuItem Header="_RegEx Preferences" Click="RegExPreferences_Open" />
                                    <Separator />
                                    <MenuItem Header="_Wrap text" IsCheckable="True" IsChecked="{Binding WrappingEnabled, Mode=TwoWay}" ToolTip="Consider switching it off for large texts" Checked="WrapMenu_Checked" Unchecked="WrapMenu_Checked"/>
                                    <MenuItem Header="_Match highlighting" IsCheckable="True" IsChecked="{Binding HighlightEnabled, Mode=TwoWay}" ToolTip="Highlights matches in addition to checking them on click"/>
                                    <Separator />
                                    <MenuItem Header="_Exit" Click="CloseWindow" />
                                </MenuItem>
                            </Menu>
                        </DockPanel>
                        <TextBlock DockPanel.Dock="Left" Foreground="White" Margin="10,0,0,0" VerticalAlignment="Center" FontSize="16">
                            <Bold>Reg</Bold>ular Coffee
                        </TextBlock>
                    </DockPanel>
                    <DockPanel HorizontalAlignment="Right">
                        <Button DockPanel.Dock="Right" Width="30" Height="27" VerticalAlignment="Top" Click="CloseWindow" Style="{StaticResource CloseButton}">
                            <StackPanel>
                                <Image Source="Icons/Close.png" />
                            </StackPanel>
                        </Button>
                        <Button DockPanel.Dock="Right" Width="30" Height="27" VerticalAlignment="Top" Click="MaximizeWindow" Style="{StaticResource WindowButton}">
                            <StackPanel>
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Normal">
                                                    <Setter Property="Source" Value="Icons/Maximize.png"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                                                    <Setter Property="Source" Value="Icons/Restore.png"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </StackPanel>
                        </Button>
                        <Button DockPanel.Dock="Right" Width="30" Height="27" VerticalAlignment="Top" Click="MinimizeWindow" Style="{StaticResource WindowButton}">
                            <StackPanel>
                                <Image Source="Icons/Minimize.png" />
                            </StackPanel>
                        </Button>
                    </DockPanel>
                </Grid>
                <Rectangle Fill="{StaticResource DarkGrayBrush}" VerticalAlignment="Bottom" Grid.Row="1"/>
            </Grid>

            <!--Preferences grid-->
            <Grid Grid.Row="1">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="70"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="15"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!--Regex Prefs-->
                    <Grid Grid.Row="0" Grid.Column="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border BorderThickness="0" Grid.Row="0"
                        CornerRadius="0,0,5,5" Background="{StaticResource BlueBrush}" Margin="0,0,0,5">
                            <Border.Effect>
                                <DropShadowEffect Color="#FFCBCBCB" Opacity="0.5" Direction="270"/>
                            </Border.Effect>
                            <TextBlock Text="RegEx Preferences" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="2" FontSize="15" FontWeight="Bold" Foreground="White" Style="{StaticResource bigHeaders}"/>
                        </Border>

                        <Grid Grid.Row="1">
                            <Grid Grid.Row="0" Grid.Column="0" Name="regexPrefs">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="170"/>
                                    <ColumnDefinition Width="100"/>
                                    <ColumnDefinition Width="120"/>
                                    <ColumnDefinition Width="120"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <CheckBox Grid.Row="0" Grid.Column="1" Content="Ignore Case"/>
                                <CheckBox Grid.Row="0" Grid.Column="2" Content="Multiline"/>
                                <CheckBox Grid.Row="0" Grid.Column="3" Content="Explicit Capture"/>
                                <CheckBox Grid.Row="0" Grid.Column="4" Content="Singleline"/>
                                <CheckBox Grid.Row="1" Grid.Column="1" Content="Ignore Pattern Whitespace"/>
                                <CheckBox Grid.Row="1" Grid.Column="2" Content="Right To Left"/>
                                <CheckBox Grid.Row="1" Grid.Column="3" Content="ECMA Script"/>
                                <CheckBox Grid.Row="1" Grid.Column="4" Content="Culture Invariant"/>
                                <Button Height="30" Width="30" Grid.Column="5" Grid.RowSpan="2" Style="{StaticResource WindowButton}" ToolTip="Sets RegEx preferences to the ones used by DCT" Click="DCTClassics_Click">
                                    <StackPanel Margin="5">
                                        <Image Source="Icons/Classical.png" />
                                    </StackPanel>
                                </Button>
                            </Grid>
                        </Grid>
                    </Grid>
                    <!--Regex Prefs end-->

                    <Grid Grid.Row="1">
                        <Button Content="Save" Click="Save_Preferences_Click" Style="{StaticResource MainButton}" Width="50" Height="27"/>
                    </Grid>
                    <Grid Grid.Row="2">
                        <Button Click="Hide_Preferences_Click" Style="{StaticResource HideButton}">
                            <Polygon Points="30,0 60,10, 0,10" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button, AncestorLevel=1}}"/>
                        </Button>
                    </Grid>
                </Grid>
            </Grid>
            <!--Match buttons Grid-->
            <Grid Grid.Row="2">
                <DockPanel VerticalAlignment="Center">
                    <Button x:Name="fullMatch_Button" Content="Full Match" HorizontalAlignment="Left" Margin="10" VerticalAlignment="Top" Width="100" Click="FullMatch_ButtonClick" DockPanel.Dock="Left" IsEnabled="{Binding MatchButtonsEnabled}" Style="{StaticResource MainButton}"/>
                    <Button x:Name="partialMatch_Button" Content="Partial Match" HorizontalAlignment="Left" Margin="10" VerticalAlignment="Top" Width="100" Click="PartialMatch_ButtonClick" DockPanel.Dock="Left" IsEnabled="{Binding MatchButtonsEnabled}" Style="{StaticResource MainButton}"/>
                    <Button x:Name="cancelRegex_Button" Content="Stop" HorizontalAlignment="Left" Margin="10" VerticalAlignment="Top" Width="100" Click="CancelRegex_ButtonClick" DockPanel.Dock="Left" Visibility="{Binding MatchButtonsEnabled, Converter={StaticResource ReverseBoolToVisibilityConverter}}" Style="{StaticResource MainButton}"/>
                    <TextBlock x:Name="errorText" TextWrapping="Wrap" Text="{Binding ErrorText}" DockPanel.Dock="Left" Margin="20,0,0,0" VerticalAlignment="Center" Foreground="Red" HorizontalAlignment="Left"/>
                </DockPanel>
            </Grid>

            <!--Input Grid-->
            <Grid HorizontalAlignment="Stretch" Grid.Row="3" VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="{Binding LeftColumnWidth, Mode=TwoWay}" MinWidth="200"/>
                    <ColumnDefinition Width="2"/>
                    <ColumnDefinition Width="{Binding RightColumnWidth, Mode=TwoWay}" MinWidth="200"/>
                </Grid.ColumnDefinitions>
                <GridSplitter Grid.Column="1" Grid.Row="2"
         Width="5" Background="{StaticResource DarkGrayBrush}" 
         VerticalAlignment="Stretch" 
         HorizontalAlignment="Stretch"
         DragStarted="SplitterDragStarted_Handler" DragCompleted="SplitterDragEnded_Handler"/>
                <Grid x:Name="inputGrid" HorizontalAlignment="Stretch" Grid.Row="2" VerticalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="{Binding TopRowHeight, Mode=TwoWay}" MinHeight="210" />
                        <RowDefinition Height="2"/>
                        <RowDefinition Height="{Binding BottomRowHeight, Mode=TwoWay}" MinHeight="210"/>
                        <RowDefinition Height="30"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Row="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border BorderThickness="0" Grid.Row="0"
                        CornerRadius="0,0,0,5" Background="{StaticResource BlueBrush}" Margin="0,0,0,5">
                            <Border.Effect>
                                <DropShadowEffect Color="#FFCBCBCB" Opacity="0.5" Direction="270"/>
                            </Border.Effect>
                            <TextBlock Text="RegEx Input" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="2" Style="{StaticResource bigHeaders}"/>
                        </Border>
                        
                        <WindowsFormsHost x:Name="inputRegex"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Loaded="InputRegex_Loaded"
                                  Grid.Row="1"/>
                    </Grid>
                    
                    <GridSplitter Grid.Column="0" Grid.Row="1" Grid.RowSpan="1"
                 Height="2" Background="{StaticResource DarkGrayBrush}" 
                 HorizontalAlignment="Stretch" 
                 ResizeBehavior="PreviousAndNext" DragStarted="SplitterDragStarted_Handler" DragCompleted="SplitterDragEnded_Handler"/>
                    
                    <Grid Grid.Row="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <WindowsFormsHost x:Name="inputText"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Stretch"
                                  Loaded="InputText_Loaded"
                                  Grid.Row="1"/>
                        <Border BorderThickness="0" Grid.Row="0"
                        CornerRadius="0,0,5,5" Background="{StaticResource BlueBrush}" Margin="0,0,0,5">
                            <Border.Effect>
                                <DropShadowEffect Color="#FFCBCBCB" Opacity="0.5" Direction="270"/>
                            </Border.Effect>
                            <TextBlock Text="Text Input" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="2" Style="{StaticResource bigHeaders}"/>
                        </Border>
                    </Grid>

                    <TextBlock Margin="5" x:Name="diagnosticsLabel" Text="{Binding DiagnosticsText}" HorizontalAlignment="Left"  Grid.Row="4" VerticalAlignment="Center" FontSize="11" Grid.Column="0" Foreground="Black"/>
                </Grid>

                <!--Output Grid-->
                <Grid HorizontalAlignment="Stretch" Grid.Row="1" Grid.Column="2" VerticalAlignment="Stretch">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="30"/>
                    </Grid.RowDefinitions>
                    <Border BorderThickness="0" Grid.Row="0"
                        CornerRadius="0,0,5,0" Background="{StaticResource BlueBrush}" Margin="0,0,0,5">
                        <Border.Effect>
                            <DropShadowEffect Color="#FFCBCBCB" Opacity="0.5" Direction="270"/>
                        </Border.Effect>
                        <TextBlock Text="Results" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="2" Style="{StaticResource bigHeaders}"/>
                    </Border>
                    <TreeView x:Name="matchesTreeView" ItemsSource="{Binding MainMatches}" Grid.Row="1" ScrollViewer.HorizontalScrollBarVisibility="Disabled" BorderBrush="{x:Null}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" SelectedItemChanged="MatchesTreeView_SelectedItemChanged_Handler" SizeChanged="TreeViewSizeChanged_Handler"  KeyDown="TreeView_KeyDown">
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource modifiedTVI}">
                                <EventSetter Event="TreeViewItem.PreviewMouseRightButtonDown" Handler="TreeViewItem_PreviewMouseRightButtonDown"/>
                            </Style>
                        </TreeView.ItemContainerStyle>
                        <TreeView.Resources>
                            <HierarchicalDataTemplate ItemsSource="{Binding GroupMembers}" DataType="{x:Type local:MainMatch}">
                                <TextBlock Text="{Binding MatchText}" TextTrimming="CharacterEllipsis">
                                    <TextBlock.ContextMenu>
                                        <ContextMenu>
                                            <MenuItem Header ="Copy" Click="Copy_TreeViewItem">
                                                <MenuItem.Icon>
                                                    <Image Source="Icons/Copy.png"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                        </ContextMenu>
                                    </TextBlock.ContextMenu>
                                </TextBlock>
                            </HierarchicalDataTemplate>

                            <HierarchicalDataTemplate DataType="{x:Type local:GroupMatch}">
                                <DockPanel HorizontalAlignment="Stretch">
                                    <DockPanel.ContextMenu>
                                        <ContextMenu>
                                            <MenuItem Header ="Copy" Click="Copy_TreeViewItem"></MenuItem>
                                        </ContextMenu>
                                    </DockPanel.ContextMenu>
                                    <TextBlock Text=" [" Foreground="{Binding Number, Converter={StaticResource EvenNumberColorConverter}}" DockPanel.Dock="Left"/>
                                    <TextBlock Text="{Binding Number}" Foreground="{Binding Number, Converter={StaticResource EvenNumberColorConverter}}" DockPanel.Dock="Left"/>
                                    <TextBlock Text="]" Foreground="{Binding Number, Converter={StaticResource EvenNumberColorConverter}}" DockPanel.Dock="Left"/>
                                    <TextBlock Text="{Binding MatchText}" Margin="5,0,0,0" TextTrimming="CharacterEllipsis" DockPanel.Dock="Left"/>
                                </DockPanel>
                            </HierarchicalDataTemplate>
                        </TreeView.Resources>
                    </TreeView>
                    <Grid Grid.Row="1" Background="{StaticResource TealBrush}" Name="exportRectangle" Visibility="{Binding ExportRectangleVisibility}" LostFocus="ExportRectangle_LostFocus" Focusable="True">
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" Foreground="White" FontSize="32" TextWrapping="Wrap">Ctrl+C to export results</TextBlock>
                    </Grid>
                    <DockPanel Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="{Binding BottomButtonsVisibility}">
                        <Button x:Name="previousMatches_Button" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsEnabled="{Binding OutsetOfTreeView}" Click="PreviousMatches_Button_Click" Width="30" Style="{StaticResource PageButton}">
                            <Polygon Points="25,0 0,9, 25,18" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button, AncestorLevel=1}}"/>
                        </Button>
                        <Button x:Name="nextMatches_Button" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Click="NextMatches_Button_Click" IsEnabled="{Binding MatchesLeftUnshown}" Width="30" Style="{StaticResource PageButton}">
                            <Polygon Points="0,0 25,9, 0,18" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button, AncestorLevel=1}}"/>
                        </Button>
                        <TextBlock x:Name="matchesShowingText" HorizontalAlignment="Left" TextWrapping="Wrap" Text="{Binding MatchesShowingText}" VerticalAlignment="Center" Margin="10,0,0,0"/>
                    </DockPanel>
                </Grid>
            </Grid>
        </Grid>
    </Border>
</Window>
